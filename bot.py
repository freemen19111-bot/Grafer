import os
import json
import pytz

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters, JobQueue
)

# === –ö–û–ù–§–ò–ì ===
TOKEN = "8224693908:AAEM6woNULlwsBQJpFktBMRrVEeCpv7JOHk"
ADMIN_ID = 514959058
DATA_FILE = "profiles.json"

NAME, AGE, GENDER, PHOTO = range(4)

profiles = {}
banned_users = set()
user_temp = {}

# ======== –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï =========
def load_data():
    global profiles, banned_users
    if os.path.exists(DATA_FILE) and os.path.getsize(DATA_FILE) > 0:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
                profiles = data.get("profiles", {})
                banned_users = set(data.get("banned", []))
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞. –°–æ–∑–¥–∞–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                profiles = {}
                banned_users = set()
    else:
        save_data()

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"profiles": profiles, "banned": list(banned_users)}, f, ensure_ascii=False, indent=2)

# ======== –°–¢–ê–†–¢ =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in banned_users:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    if user_id in profiles:
        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üíû", callback_data="browse")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É üóëÔ∏è", callback_data="delete")]
        ]
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É üëå", callback_data="create")]]
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É?", reply_markup=InlineKeyboardMarkup(keyboard))

# ======== –ö–ù–û–ü–ö–ò =========
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = str(query.from_user.id)

    if data == "create":
        await query.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        user_temp[user_id] = {}
        return NAME
    elif data == "browse":
        await query.edit_message_text(text="–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∫–µ—Ç—ã...")
        await show_profiles(update, context)
        return ConversationHandler.END
    elif data == "delete":
        if user_id in profiles:
            del profiles[user_id]
            save_data()
            await query.edit_message_text("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.")
    elif data.startswith("like_"):
        target_id = data.split("_", 1)[1]
        await handle_like(update, context, user_id, target_id)
        await show_profiles(update, context)
    elif data.startswith("dislike_"):
        await query.edit_message_text("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
        await show_profiles(update, context)
    elif data.startswith("msg_"):
        target_id = data.split("_", 1)[1]
        target_username = (await context.bot.get_chat(user_id)).username
        await context.bot.send_message(
            target_id,
            f"üíå –í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username or user_id} —Ö–æ—á–µ—Ç —Å –≤–∞–º–∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è."
        )
        await query.message.reply_text("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    return ConversationHandler.END

# ======== –ê–ù–ö–ï–¢–ê =========
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_temp[user_id]["name"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    age_text = update.message.text.strip()
    if not age_text.isdigit() or not (14 <= int(age_text) <= 99):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (14‚Äì99).")
        return AGE
    user_temp[user_id]["age"] = age_text
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π ‚ôÇÔ∏è", callback_data="male"),
         InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π ‚ôÄÔ∏è", callback_data="female")]
    ]
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
    return GENDER

async def gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    gender = "–ú—É–∂—Å–∫–æ–π" if query.data == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    user_temp[user_id] = {"gender": gender, "photos": user_temp.get(user_id, {}).get("photos", [])}
    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å 1‚Äì3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ üì∏ (–º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ).")
    return PHOTO

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id not in user_temp or "photos" not in user_temp[user_id]:
        await update.message.reply_text("–ù–∞—á–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start.")
        return ConversationHandler.END

    photo_id = update.message.photo[-1].file_id
    user_temp[user_id]["photos"].append(photo_id)

    if len(user_temp[user_id]["photos"]) >= 3:
        await finish_profile(update, context)
        return ConversationHandler.END

    await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ! –û—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ñ–æ—Ç–æ ({len(user_temp[user_id]['photos'])}/3) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
    return PHOTO

async def finish_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if len(user_temp[user_id].get("photos", [])) < 1:
        await update.message.reply_text("üö´ –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return PHOTO
    profiles[user_id] = user_temp[user_id]
    save_data()
    await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    await show_profiles(update, context)
    return ConversationHandler.END

# ======== –ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢ =========
async def show_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    me = profiles.get(user_id)
    if not me:
        msg = update.callback_query.message if update.callback_query else update.message
        await msg.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.")
        return

    opposite_gender = "–ñ–µ–Ω—Å–∫–∏–π" if me["gender"] == "–ú—É–∂—Å–∫–æ–π" else "–ú—É–∂—Å–∫–æ–π"
    candidates = [
        (uid, p)
        for uid, p in profiles.items()
        if p["gender"] == opposite_gender and uid != user_id and uid not in banned_users and p.get("photos")
    ]
    if not candidates:
        msg = update.callback_query.message if update.callback_query else update.message
        await msg.reply_text("üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç.")
        return

    target_id, p = candidates[0]
    media = [InputMediaPhoto(x) for x in p["photos"]]
    await context.bot.send_media_group(user_id, media)
    text = f"**{p['name']}**, {p['age']} –ª–µ—Ç\n–ü–æ–ª: {p['gender']}"
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –ö–ª–∞—Å—Å", callback_data=f"like_{target_id}"),
         InlineKeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"dislike_{target_id}")],
        [InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"msg_{target_id}")]
    ]
    await context.bot.send_message(user_id, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# ======== –õ–ê–ô–ö–ò =========
async def handle_like(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, target_id):
    query = update.callback_query
    liker_username = (await context.bot.get_chat(user_id)).username
    await context.bot.send_message(
        target_id,
        f"‚ù§Ô∏è –í–∞—Å –ª–∞–π–∫–Ω—É–ª @{liker_username or user_id}! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
    )
    try:
        await query.edit_message_caption(caption="üëç –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=None)
    except:
        await query.edit_message_text("üëç –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ======== –ê–î–ú–ò–ù =========
async def all_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = "üìã –í—Å–µ –∞–Ω–∫–µ—Ç—ã:\n"
    for uid, p in profiles.items():
        text += f"ID: {uid} | {p.get('name','N/A')} ({p.get('age','N/A')}), {p.get('gender','N/A')}\n"
    await update.message.reply_text(text or "–ù–µ—Ç –∞–Ω–∫–µ—Ç.")

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /ban <id>")
        return
    uid = args[0]
    banned_users.add(uid)
    if uid in profiles:
        del profiles[uid]
    save_data()
    await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /unban <id>")
        return
    uid = args[0]
    banned_users.discard(uid)
    save_data()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# ======== MAIN =========
def main():
    load_data()

    bishkek_tz = pytz.timezone("Asia/Bishkek")

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª–∏ set_timezone
    job_queue = JobQueue()
    job_queue.start()

    app = (
        Application.builder()
        .token(TOKEN)
        .job_queue(job_queue)
        .build()
    )

    # –î–∏–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="^create$"), CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GENDER: [CallbackQueryHandler(gender_choice, pattern="^(male|female)$")],
            PHOTO: [
                MessageHandler(filters.PHOTO, get_photo),
                MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex("^(–ì–æ—Ç–æ–≤–æ|–≥–æ—Ç–æ–≤–æ)$"), finish_profile),
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: u.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("all_profiles", all_profiles))
    app.add_handler(CommandHandler("ban", ban_user))
    app.add_handler(CommandHandler("unban", unban_user))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

